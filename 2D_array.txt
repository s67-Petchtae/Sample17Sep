int[][] grid = {{1, 2, 3, 4}, 
                 {5, 6, 7, 8}, 
                 {1, 2, 3, 4}, 
                 {5, 6, 7, 8}};
boolean[][] revealed;
int cellSize = 100;
int firstRow = -1, firstCol = -1;
int secondRow = -1, secondCol = -1;
boolean waiting = false;
int showTimer = 0;

void setup() {
    size(400, 400);
    revealed = new boolean[grid.length][grid[0].length];
}

void draw() {
    background(255);
    
    for (int i = 0; i < grid.length; i++) {
        for (int j = 0; j < grid[0].length; j++) {
            int x = j * cellSize;
            int y = i * cellSize;
            
            if (revealed[i][j]) {
                fill(255);
                rect(x, y, cellSize, cellSize);
                fill(0);
                textAlign(CENTER, CENTER);
                text(grid[i][j], x + cellSize / 2, y + cellSize / 2);
            } else {
                fill(150);
                rect(x, y, cellSize, cellSize);
                textSize(50);
            }
        }
    }
    
    if (waiting && millis() - showTimer > 1000) {
        if (grid[firstRow][firstCol] != grid[secondRow][secondCol]) {
            revealed[firstRow][firstCol] = false;
            revealed[secondRow][secondCol] = false;
        }
        firstRow = -1;
        firstCol = -1;
        secondRow = -1;
        secondCol = -1;
        waiting = false;
    }
}

void mousePressed() {
    int col = mouseX / cellSize;
    int row = mouseY / cellSize;
    
    if (row < grid.length && col < grid[0].length && !revealed[row][col] && !waiting) {
        revealed[row][col] = true;
        
        if (firstRow == -1 && firstCol == -1) {
            firstRow = row;
            firstCol = col;
        } else {
            secondRow = row;
            secondCol = col;
            waiting = true;  
            showTimer = millis();
        }
    }
}
